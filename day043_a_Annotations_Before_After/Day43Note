Day43 TestNG- Annotations
=========================
Annotations are used to control the order of execution of test cases
Only @Test annotations will yield TestNG reports

	@Test		Actual Test method
	@BeforeMethod	Executes before every @test methods
	@AfterMethod	Executes after every @test methods
	@BeforeClass	Executes once before class
	@AfterClass	Executes once after class
	@BeforeTest	Executes before every xml level Test
	@AfterTest	Executes after every xml level Test
	@BeforeSuite	Executes before xml level Suite
	@AfterSuite	Executes after xml level Suite

We include validations only in @Test methods
Other methods are just prerequisites for test method
So, only those @Test methods will be shown on TestNG reports

According to xml, Test is a collection of class
@Test and xml level test is not the same

Hierarchy -
	Suite contains Test
	Test contains Classes
	Classes contain methods(@Test)

Before/ After Method will execute at method level
Before/ After Class will execute at class level
Before/ After Test will execute at XML Test level
Before/ After Suite will execute at XML Suite level
_______________________________________________________________________________

Assertions
==========
Assertions are validation points in a testcase

Scenario eg:- 
	@Test
	void test1()
	{
	  if(driver.getTitle().equals("OrangeHRM")) 
		{
			Syso ("Titles Match");
		}
		 else 
		{
			Syso (Titles Dont Match");
		}
	}
Console output -
	Titles Dont Match
	PASSED:	test1
	
Here, the java logic will find out that the titles are not same, but TestNG logic will pass the testcase
To avoid that and yield proper report, we use Assertions

Alternatively if we want to use java logic-
	if (expectedTitle.equals(capturedTitle))
	{
		Assert.assertTrue(true);
	}
	else 
	 {
		Assert.assertTrue(false);
	  }

Two types of Assertions
	Hard -> Puts hard stop to script execution
	Soft -> There is no stop in script execution
Generally Hard assertions are used everywhere by industrial standards
Assertions are done at the end of automation scripts since if assertion fails, there are no scripts missed.
Syntax -
	Assert.assertEquals(expectedResult, actualResult);
Console output -
	Failed: test1
If the assert values dont match, then the result will be reflected in TestNG report also

Hard Assertion
--------------
	We can use hard assertion by calling the static methods in Assert class
	If any assertion fails, then the script below wont execute
	It is recommended to use the Assert statement at the end of each method, so that any assertion fails, there are no scripts missed
Eg- 
	Assert.assertEquals("abc", "xyz");
	Assert.assertEquals(20, 20);
	Assert.assertEquals(123, "123");
	Assert.assertTrue(true);
	Assert.assertFalse(1 == 2);
	Assert.fail(); // if we want to directly fail the test

Soft Assertion
--------------
	We use soft assertion by creating an object of the class SoftAssertion
	If any assertion fails, then the script below will also execute.
	It is mandatory to use assertAll() method after soft assertion to reflect failure on report
	Otherwise, even if assertion fails, the test report will be passed
Eg-
	SoftAssert sa = new SoftAssert();
	sa.assertEquals(1, 2);
	sa.assertTrue(true);
	sa.assertAll() // important for proper failure update

		---END---